<Window x:Class="joselima.dicom.viewer.wpf.Views.NotificationWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:joselima.dicom.viewer.wpf.Views"
        xmlns:vm="clr-namespace:joselima.dicom.viewer.wpf.ViewModels"
        mc:Ignorable="d"
        Title="Notification" MaxWidth="500"
        ResizeMode="CanResize" SizeToContent="WidthAndHeight"
        WindowStartupLocation="CenterOwner">

    <Window.Resources>
        <vm:NotificationViewModel x:Key="MockNotification"
                                  Message="Exception handling is the process of responding to the occurrence, during computation, of exceptions – anomalous or exceptional conditions requiring special processing – often changing the normal flow of program execution. It is provided by specialized programming language constructs, computer hardware mechanisms like interrupts or operating system IPC facilities like signals. In general, an exception breaks the normal flow of execution and executes a pre-registered exception handler. The details of how this is done depends on whether it is a hardware or software exception and how the software exception is implemented. Some exceptions, especially hardware ones, may be handled so gracefully that execution can resume where it was interrupted. Alternative approaches to exception handling in software are error checking, which maintains normal program flow with later explicit checks for contingencies reported using special return values or some auxiliary global variable such as C's errno or floating point status flags; or input validation to preemptively filter exceptional cases. "/>
    </Window.Resources>

    <Grid d:DataContext="{StaticResource MockNotification}">
        <ScrollViewer MaxHeight="600">
        <TextBlock Text="{Binding Message}" Margin="16"
               VerticalAlignment="Center" 
               HorizontalAlignment="Center"
                   TextWrapping="Wrap"/>
        </ScrollViewer>
    </Grid>
</Window>
